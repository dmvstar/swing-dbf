/* 
 *
 *  $Id: CP1125.java,v 0.0.1 2005/10/02 20:20 sdv Exp $
 *  
 *  Copyright (C) 2003-2004 Dmitry Starjinsky 
 *
 *  File :               CP1125.java
 *  Description :        
 *  Author's email :     dvstar@users.sourceforge.net  
 *  Author's Website :   
 *
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package ua.nio.cs.ext;

import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;

import sun.nio.cs.HistoricallyNamedCharset;
import sun.nio.cs.SingleByteDecoder;
import sun.nio.cs.SingleByteEncoder;

/**
 * Charset for Ukrainian CP1125.
 * <p>Title: </p>
 * Charset for Ukrainian CP1125.
 * <p>Description: </p>
 * Charset for Ukrainian CP1125.
 * Реализация кодировки CP1125 - расширение cp866 с поддержкой украинских
 * символов.
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: </p>
 * @author  Dmitry Starjinsky dvstar@users.sourceforge.net
 * @version 0.0.1
 */

public class CP1125
    extends Charset
    implements HistoricallyNamedCharset {
    private CharsetDecoder decoder = null;
    private CharsetEncoder encoder = null;

  /**
   * Default constructor.
   */
  public CP1125() {
    //    super("CP1125", new String[] {
    //                "CP1125", "CP866A",
    //                "cp866a", "CP866-A","cp866-a"}
    //         );
    super("CP1125", UkrainianCharsets.aliasesFor("CP1125"));
  }

  public CP1125(String canonicalName, String[] aliases) {
    super(canonicalName, aliases);
  }

  /**
   * Historical name of encoding.
   * @return String name
   */
  public String historicalName() {
    return "CP1125";
  }

  /**
   * Tells whether or not this charset contains the given charset.
   *
   * @return  <tt>true</tt> if, and only if, the given charset
   *          is contained in this charset
   */
  public boolean contains(Charset cs) {
    return cs instanceof CP1125;
  }

  /**
   * Constructs a new encoder for this charset. </p>
   *
   * @return  A new encoder for this charset
   *
   * @throws  UnsupportedOperationException
   *          If this charset does not support encoding
   */
  public CharsetEncoder newEncoder() {
      if( encoder == null ) encoder = new Encoder(this);  
      return encoder;
  }

  /**
   * Constructs a new decoder for this charset. </p>
   *
   * @return  A new decoder for this charset
   */
  public CharsetDecoder newDecoder() {
    if( decoder == null ) decoder = new Decoder(this);  
    return decoder;
  }

  public String getDecoderSingleByteMappings() {
    return Decoder.byteToCharTable;
  }

  public short[] getEncoderIndex1() {
    return Encoder.index1;
  }

  public String getEncoderIndex2() {
    return Encoder.index2;
  }

  /**
   * Encoder class for CP1125
   * <p>Title: </p>
   * <p>Description: </p>
   * <p>Copyright: Copyright (c) 2005</p>
   * <p>Company: </p>
   * @author not attributable
   * @version 0.0.1
   */
  private static class Encoder
      extends SingleByteEncoder {

    /**
     * 2nd level index, provided by subclass
     */
    protected static
        String index2 =
        "\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017" + //0 -0x00
        "\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037" + //16-0x10
        " !\"#$%&'()*+,-./" + //32-0x20
        "0123456789:;<=>?" + //48-0x30
        "@ABCDEFGHIJKLMNO" + //64-0x40
        "PQRSTUVWXYZ[\\]^_" + //80-0x50
        "`abcdefghijklmno" + //96-0x60
        "pqrstuvwxyz{|}~\177" + //112-0x70
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //128-0x80
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //144-0x90
        "\377\000\000\000\375\000\000\000\000\000\000\000\000\000\000\000" + //160-0xA0
        "\370\000\000\000\000\000\000\372\000\000\000\000\000\000\000\000" + //176-0xB0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //192-0xC0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //208-0xD0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //224-0xE0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //240-0xF0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //256-0x100
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //272-0x110
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //288-0x120
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //304-0x130
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //320-0x140
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //336-0x150
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //352-0x160
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //368-0x170
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //384-0x180
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //400-0x190
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //416-0x1A0
        "\000\000\000\000\000\000\000\000\360\000\000\364\000\366\370\000" + //432-0x1B0 +366[І],364-370[Ї],362-364[Є]
        "\000\000\000\000\000\366\000\200\201\202\203\204\205\206\207\210" + //448-0x1C0
        "\211\212\213\214\215\216\217\220\221\222\223\224\225\226\227\230" + //464-0x1D0
        "\231\232\233\234\235\236\237\240\241\242\243\244\245\246\247\250" + //480-0x1E0
        "\251\252\253\254\255\256\257\340\341\342\343\344\345\346\347\350" + //496-0x1F0
        "\351\352\353\354\355\356\357\000\361\000\000\365\000\367\371\000" + //512-0x200 +367[і],365-371[ї],363-365[є]
        "\000\000\000\000\000\367\000\000\000\000\000\000\000\000\000\000" + //528-0x210
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //544-0x220
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //560-0x230
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //576-0x240
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //592-0x250
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //608-0x260
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //624-0x270
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //640-0x280
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //656-0x290
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //672-0x2A0
        "\000\000\000\000\000\000\000\374\000\000\000\000\000\000\000\000" + //688-0x2B0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //704-0x2C0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //720-0x2D0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //736-0x2E0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //752-0x2F0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //768-0x300
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //784-0x310
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //800-0x320
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //816-0x330
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //832-0x340
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //848-0x350
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //864-0x360
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //880-0x370
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //896-0x380
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //912-0x390
        "\000\371\373\000\000\000\000\000\000\000\000\000\000\000\000\000" + //928-0x3A0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //944-0x3B0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //960-0x3C0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //976-0x3D0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //992-0x3E0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1008-0x3F0
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1024-0x400
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1040-0x410
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1056-0x420
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1072-0x430
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1088-0x440
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1104-0x450
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1120-0x460
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + //1136-0x470
        "\000\000\000\000\000\000\000\000\304\000\263\000\000\000\000\000" + //1152-0x480
        "\000\000\000\000\332\000\000\000\277\000\000\000\300\000\000\000" + //1168-0x490
        "\331\000\000\000\303\000\000\000\000\000\000\000\264\000\000\000" + //1184-0x4A0
        "\000\000\000\000\302\000\000\000\000\000\000\000\301\000\000\000" + //1200-0x4B0
        "\000\000\000\000\305\000\000\000\000\000\000\000\000\000\000\000" + //1216-0x4C0
        "\000\000\000\000\000\000\000\000\315\272\325\326\311\270\267\273" + //1232-0x4D0
        "\324\323\310\276\275\274\306\307\314\265\266\271\321\322\313\317" + //1248-0x4E0
        "\320\312\330\327\316\000\000\000\000\000\000\000\000\000\000\000" + //1264-0x4F0
        "\000\000\000\000\000\000\000\000\337\000\000\000\334\000\000\000" +
        "\333\000\000\000\335\000\000\000\336\260\261\262\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\376\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" +
        "\000\000\000\000\000\000\000\0";

    /**
     * 1st level index, provided by subclass
     */
    private static final short index1[] = {
        0, 184, 184, 184, 439, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 673, 904, 184, 184, 1160, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184,
        184, 184, 184, 184, 184, 184, 184, 184
    };

    /**
     * Mask to isolate bits for 1st level index, from subclass
     */
    protected static int mask1 = 0xFF00;

    /**
     * Mask to isolate bits for 2nd level index, from subclass
     */
    protected static int mask2 = 0xFF;

    /**
     * Shift to isolate bits for 1st level index, from subclass
     */
    protected static int shift = 8;

    /**
     * Constructor
     * @param cs Charset charset
     */
    public Encoder(Charset cs) {
      super(cs, index1, index2, mask1, mask2, shift);
    }
  }

  /**
   * Decoder class for CP1125
   * <p>Title: </p>
   * <p>Description: </p>
   * <p>Copyright: Copyright (c) 2005</p>
   * <p>Company: </p>
   * @author not attributable
   * @version 0.0.1
   */
  private static class Decoder
      extends SingleByteDecoder {

    /**
     * Mapping table. Values supplied by subclass
     */
     private static final
        String byteToCharTable =
        "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417" + //0-0x0
        "\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F" + //8-0x8
        "\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427" + //16-0x10
        "\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F" + //24-0x18
        "\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437" + //32-0x20
        "\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F" + //40-0x28
        "\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556" + //48-0x30
        "\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510" + //56-0x38
        "\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F" + //64-0x40
        "\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567" + //72-0x48
        "\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B" + //80-0x50
        "\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580" + //88-0x58
        "\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447" + //96-0x60
        "\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F" + //104-0x68
//      "\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E"+//112-0x70
//      "\260\u2219\267\u221A\u2116\244\u25A0\240"+        //120-0x78
        "\u0401\u0451\u0404\u0454\u0404\u0454\u0406\u0456" + //112-0x70
        "\u0407\u0457\267\u221A\u2116\244\u25A0\240" + //120-0x78
        "\000\001\002\003\004\005\006\007" + //128-0x80
        "\b\t\n\013\f\r\016\017" + //136-0x88
        "\020\021\022\023\024\025\026\027" + //144-0x90
        "\030\031\032\033\034\035\036\037" + //152-0x98
        " !\"#$%&'()*+,-./" +
        "0123456789:;<=>?" +
        "@ABCDEFGHIJKLMNO" +
        "PQRSTUVWXYZ[\\]^_" +
        "`abcdefghijklmno" +
        "pqrstuvwxyz{|}~\177";

    /**
     * Constructor
     * @param cs Charset charset
     */
    public Decoder(Charset cs) {
      super(cs, byteToCharTable);
    }
    
    @Override
    public char decode(int byteIndex) {
                int n = byteIndex + 128;
                if (n >= byteToCharTable.length() || n < 0)
                    return '\uFFFD';
                return byteToCharTable.charAt(n);
   }
    
  }

}
